//
// This file is part of khmer, http://github.com/ged-lab/khmer/, and is
// Copyright (C) Michigan State University, 2009-2013. It is licensed under
// the three-clause BSD license; see doc/LICENSE.txt.
// Contact: khmer-project@idyll.org
//

//
// A module for Python that exports khmer C++ library functions.
//

// Must be first.

#ifndef KHMER_ASYNC_MODULE_HH
#define KHMER_ASYNC_MODULE_HH

#include <Python.h>

#include "khmer_async.hh"
#include "async_sequence_processor.hh"
#include "async_diginorm.hh"
#include "async_parser.hh"

using namespace khmer;

extern "C" {

// Handle any errors generated by the given Async object
#define handle_exceptions(async) { \
    try { \
        (async)->check_and_rethrow(); \
    } catch (read_parsers::UnknownPairReadingMode &e) { \
        PyErr_SetString(PyExc_RuntimeError, "Asynchronous IParser using an unknown read pairing mode"); \
        return NULL; \
    } catch (read_parsers::InvalidReadPair &e) { \
        PyErr_SetString(PyExc_IOError, "Asynchronous IParser encountered an invalid read pair"); \
        return NULL; \
    } catch (khmer::khmer_exception &e) { \
	PyErr_SetString(PyExc_RuntimeError, e.what()); \
	return NULL; \
    } \
}

typedef struct {
    PyObject_HEAD
    AsyncSequenceProcessor * async_sp;
} khmer_AsyncSequenceProcessorObject;

PyAPI_DATA(PyTypeObject) khmer_AsyncSequenceProcessorType;

typedef struct {
    khmer_AsyncSequenceProcessorObject async_sp;
    AsyncDiginorm * async_diginorm;
} khmer_AsyncDiginormObject;

PyAPI_DATA(PyTypeObject) khmer_AsyncDiginormType;

typedef struct {
    khmer_AsyncSequenceProcessorObject async_sp;
    AsyncSequenceProcessorTester * async_sptester;
} khmer_AsyncSequenceProcessorTesterObject;

PyAPI_DATA(PyTypeObject) khmer_AsyncSequenceProcessorTesterType;

}
#endif
